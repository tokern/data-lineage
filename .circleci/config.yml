# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1
orbs:
  codecov: codecov/codecov@1.0.5
workflows:
  build_and_deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - deploy:
          requires:
            - build
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
            branches:
              ignore: /.*/

jobs:
  build: &test-template
    docker:
      - image: circleci/python:3.8.3
        environment:
          PIPENV_VENV_IN_PROJECT: true
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/postgres:12.0-alpine-ram
        environment:
          POSTGRES_USER: piiuser
          POSTGRES_PASSWORD: p11secret
          POSTGRES_DB: piidb

      - image: circleci/mysql:8.0.18-ram
        environment:
          MYSQL_USER: piiuser
          MYSQL_PASSWORD: p11secret
          MYSQL_DATABASE: piidb
          MYSQL_ROOT_PASSWORD: r00tPa33w0rd
    environment:
      PYVERSION: "3.8.3"
    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0

      - run:
          name: Wait for db
          command: |
            dockerize -wait tcp://localhost:5432 -timeout 1m
            dockerize -wait tcp://localhost:3306 -timeout 1m

      # Download and cache dependencies
      - restore_cache:
          key: deps-{{ checksum "Pipfile.lock" }}-{{ .Environment.PYVERSION }}

      - run: &install-deps
          name: install dependencies
          command: |
            sudo pip install pipenv
            pipenv sync --dev

      - save_cache:
          key: deps-{{ checksum "Pipfile.lock" }}-{{ .Environment.PYVERSION }}
          paths:
            - ".venv"

      - run:
          name: install data-lineage
          command: pipenv run python setup.py develop

      # run tests!
      - run:
          name: run tests
          command: |
            pipenv run isort --check --diff .
            pipenv run black --check .
            pipenv run flake8 data_lineage test
            pipenv run pytest --junitxml=junit/test-results.xml --cov=data_lineage --cov-report=xml --cov-report=html test/

      - store_test_results: # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: test-results

      - store_artifacts:
          path: test-reports
          destination: test-reports

      - codecov/upload:
          file: coverage.xml

  deploy:
    environment:
      PYVERSION: "3.8.1"
    docker:
      - image: tokern/python:3.7.5-buster
        environment:
          PYVERSION: "3.8.1"
    steps:
      - checkout
      - restore_cache:
          key: deps-{{ checksum "Pipfile.lock" }}-{{ .Environment.PYVERSION }}
      - run:
          name: install dependencies
          command: |
            sudo pip install pipenv
            pipenv install --dev

      - save_cache:
          key: deps-{{ checksum "Pipfile.lock" }}-{{ .Environment.PYVERSION }}
          paths:
            - ".venv"

      - run:
          name: verify git tag vs. version
          command: |
            pipenv run python setup.py verify

      - run:
          name: init .pypirc
          command: |
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username = $PYPI_USERNAME" >> ~/.pypirc
            echo -e "password = $PYPI_PASSWORD" >> ~/.pypirc
      - run:
          name: create packages
          command: |
            pipenv run python setup.py sdist bdist_wheel

      - run:
          name: upload to pypi
          command: |
            pipenv run twine upload dist/*

      - run:
          name: install git release utilities
          command: |
            go get github.com/aktau/github-release
            go get -u github.com/git-chglog/git-chglog/cmd/git-chglog

      - run:
          name: release
          command: |
            ~/go/bin/git-chglog $CIRCLE_TAG | ~/go/bin/github-release release --description - --tag $CIRCLE_TAG

